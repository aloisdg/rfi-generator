# This is the main configuration file for the application.
# ~~~~~
application.name=RFI Generator

# Application mode
# ~~~~~
# Set to dev to enable instant reloading and other development help.
# Otherwise set to prod.
application.mode=dev
%prod.application.mode=prod

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions
# If you deploy your application to several instances be sure to use the same key !
application.secret=JllQHUia1T2dXsGjQstVkr5fQRBgOiooNKTiaSxz0bKhvEV8pWvXgCpYWIdrm14T

# i18n
# ~~~~~
# Define locales used by your application.
# You can then place localized messages in conf/messages.{locale} files
# application.langs=fr,en,ja

# Date format
# ~~~~~
date.format=MM/dd/yyyy
# date.format.fr=dd/MM/yyyy

# Server configuration
# ~~~~~
# If you need to change the HTTP port, uncomment this (default is set to 9000)
http.port=9000
#
# By default the server listen for HTTP on the wilcard address.
# You can restrict this.
# http.address=127.0.0.1
#
# Use this if you don't host your Play application at the root of the domain
# you're serving it from. This parameter has no effect when deployed as a
# war, because the path will be handled by the application server.
# http.path=/

# Session configuration
# ~~~~~~~~~~~~~~~~~~~~~~
# By default, session will be written to the transient PLAY_SESSION cookie.
# The cookies are not secured by default, only set it to true
# if you're serving your pages through https.
# application.session.cookie=PLAY
application.session.maxAge=900s
# application.session.secure=false
application.session.httpOnly=true

# Session/Cookie sharing between subdomain
# ~~~~~~~~~~~~~~~~~~~~~~
# By default a cookie is only valid for a specific domain. By setting
# application.defaultCookieDomain to '.example.com', the cookies
# will be valid for all domains ending with '.example.com', ie:
# foo.example.com and bar.example.com
# application.defaultCookieDomain=.example.com

# JVM configuration
# ~~~~~
# Define which port is used by JPDA when application is in debug mode (default is set to 8000)
# jpda.port=8000
#
# Java source level => 1.5, 1.6 or 1.7 (experimental)
# java.source=1.5

# Log level
# ~~~~~
# Specify log level for your application.
# If you want a very customized log, create a log4j.properties file in the conf directory
application.log=DEBUG
#
# More logging configuration
# application.log.path=/log4j.properties
# application.log.system.out=off

# Database configuration
# ~~~~~ 
# Enable a database engine if needed.
#
# To quickly set up a development database, use either:
#   - mem : for a transient in memory database (H2 in memory)
#   - fs  : for a simple file written database (H2 file stored)
#db=mem
#
# To connect to a local MySQL5 database, use:
db=mysql://root:rfi_gen@localhost/rfi_gen
%test.db=mysql://root:rfi_gen@localhost/rfi_gen_test
%prod.db=mysql://root:rfi_gen@localhost/rfi_gen
#
# To connect to a local PostgreSQL9 database, use:
# db=postgres://user:pwd@host/database
#
# If you need a full JDBC configuration use the following :
# db.url=jdbc:postgresql:database_name
# db.driver=org.postgresql.Driver
# db.user=root
# db.pass=secret
#
# Connections pool configuration :
# db.pool.timeout=1000
# db.pool.maxSize=30
# db.pool.minSize=10
#
# If you want to reuse an existing Datasource from your application server, use:
# db=java:/comp/env/jdbc/myDatasource
#
# When using an existing Datasource, it's sometimes needed to destroy it when
# the application is stopped. Depending on the datasource, you can define a
# generic "destroy" method :
# db.destroyMethod=close

# JPA Configuration (Hibernate)
# ~~~~~
#
# Specify the custom JPA dialect to use here (default to guess):
# jpa.dialect=org.hibernate.dialect.PostgreSQLDialect
#
# Specify the ddl generation pattern to use. Set to none to disable it 
# (default to update in DEV mode, and none in PROD mode):
jpa.ddl=update
%prod.jda.ddl=update
#
# Debug SQL statements (logged using DEBUG level):
#jpa.debugSQL=true
#
# You can even specify additional hibernate properties here:
#hibernate.use_sql_comments=true
# ...
#
# Store path for Blob content
attachments.path=data/attachments

# Memcached configuration
# ~~~~~ 
# Enable memcached if needed. Otherwise a local cache is used.
# memcached=enabled
#
# Specify memcached host (default to 127.0.0.1:11211)
# memcached.host=127.0.0.1:11211
#
# Or you can specify multiple host to build a distributed cache
# memcached.1.host=127.0.0.1:11211
# memcached.2.host=127.0.0.1:11212
#
# Use plain SASL to authenticate for memcached
# memcached.user=
# memcached.password=

# HTTP Response headers control for static files
# ~~~~~
# Set the default max-age, telling the user's browser how long it should cache the page.
# Default is 3600 (one hour). Set it to 0 to send no-cache.
# This is only read in prod mode, in dev mode the cache is disabled.
# http.cacheControl=3600

# If enabled, Play will generate entity tags automatically and send a 304 when needed.
# Default is true, set it to false to deactivate use of entity tags.
# http.useETag=true

# Custom mime types
# mimetype.xpi=application/x-xpinstall

# WS configuration
# ~~~~~
# Default engine is Async Http Client, uncomment to use
# the JDK's internal implementation
# webservice = urlfetch
# If you need to set proxy params for WS requests
# http.proxyHost = localhost
# http.proxyPort = 3128
# http.proxyUser = jojo
# http.proxyPassword = jojo

# Mail configuration
# ~~~~~ 
# Default is to use a mock Mailer
mail.smtp=mock

mail.debug = true

# Or, specify mail host configuration
%prod.mail.smtp.host=10.3.164.45
#mail.smtp.host=10.3.164.45
#mail.smtp.port=25
#mail.smtp.host=localhost
#mail.smtp.protocol=smtps
#mail.smtp.user=admin
#mail.smtp.pass=
#mail.smtp.channel=ssl
%prod.mail.smtp.port=25

mail.from = RFI Generator <rfi_generator@email.com>

# Url-resolving in Jobs
# ~~~~~~
# When rendering templates with reverse-url-resoling (@@{..}) in Jobs (which do not have an inbound Http.Request),
# ie if sending a HtmlMail, Play need to know which url your users use when accessing your app.
# %test.application.baseUrl=http://localhost:9000/
# %prod.application.baseUrl=http://www.yourdomain.com/
%prod.application.baseUrl=https://rfi.example.com
application.baseUrl=http://localhost:9000

# Jobs executor
# ~~~~~~
# Size of the Jobs pool
# play.jobs.pool=10

# Execution pool
# ~~~~~
# Default to 1 thread in DEV mode or (nb processors + 1) threads in PROD mode.
# Try to keep a low as possible. 1 thread will serialize all requests (very useful for debugging purpose)
# play.pool=3

# Open file from errors pages
# ~~~~~
# If your text editor supports opening files by URL, Play! will
# dynamically link error pages to files 
#
# Example, for textmate:
# play.editor=txmt://open?url=file://%s&line=%s

# Testing. Set up a custom configuration for test mode
# ~~~~~
#%test.module.cobertura=${play.path}/modules/cobertura
#%test.db=mysql://root:rfi_gen@localhost/rfi_gen_TEST
%test.application.mode=dev
#%test.db.url=jdbc:h2:mem:play;MODE=MYSQL;LOCK_MODE=0
%test.jpa.ddl=create
#%test.mail.smtp=mock

# Press is a sweet module for compressing your css/js, I even use it during development for libraries
press.enabled=false
%prod.press.enabled=true

# Map information for use in the map experience as well as the admin experience's RFI and Event edit forms
mapProjection=EPSG:4326
map1Endpoint=http://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/export
map2Endpoint=http://services.arcgisonline.com/ArcGIS/rest/services/ESRI_Imagery_World_2D/MapServer/export
map1Type=ArcGIS93Rest
map2Type=ArcGIS93Rest
map1Token=
map2Token=
mapLayer1=0,1,2,3,4,5,6,7,8,9,10
mapLayer2=0
mapLayer1Name=World Topography
mapLayer2Name=Terrain/Imagery

# Points to the root of the application (not the server) for determining if the "back" button needs to be displayed
refererFilter=http://localhost:9000/
%prod.refererFilter=http://rfi.example.com

# Major.minor version
build=1.3
# Leave migration = 0, if enabled it allows the Migration.java job to run on application start (no longer used)
migration=0
# Instance-specific network ID format
idPrefix=U-%d
idRegex=[uU]-(\\d+)
attachmentsEnabled=false

# By default, disable reporting when running in "test" mode so our unit tests pass
jobs.reporting.enabled=1
%test.jobs.reporting.enabled=0

# Used to determine how often the reporting jobs runs
cron.reporting=0 * * * * ?
%prod.cron.reporting=0 0 * * * ?

# Show classification form on the RFI edit page?
eventClassification=CLASSIFICATION COULD BE UP TO Level1
defaultClassification=Level1
showClassifications=true
%prod.showClassifications=false

exportDateFormat=MM-dd-yyyy-HHmm

# Specifies which HTTP request header to pull the username from (also see "geoAxisRegex")
ssoHTTPHeader=x-sso-user

feedbackURL=https://google.com  # Tailor to a link to drop the user into a feedback system w/in your infrastructure 
subject=RFI Generator

bypassSecurity=1
%prod.bypassSecurity=0

analyticsEnabled=0
%prod.analyticsEnabled=1

defaultRole=Field
%prod.defaultRole=Field

# Choose an authentication provider (NoAuth/GeoAxis/OpenAM)
authClass=authenticationProviders.NoAuth
%prod.authClass=authenticationProviders.GeoAxis
# Regex to pull the username from the HTTP header that transmits the username
geoAxisRegex=^dn=([^;]+).*

geoQ.username=admin@gmail.com
geoQ.password=administrator
geoQ.baseURL=http://localhost:3000

# Set to "1" to enable pushing spatial RFIs to geoserver -> see wfs.url for geoserver endpoint
ogcPublishing=1
%prod.ogcPublishing=0

#module.search=${play.path}/modules/search-head
#module.press=${play.path}/modules/press-1.0.36

deadbolt.handler=controllers.MyDeadboltHandler

# Geonames URL info
gns.URL = http://geonames.nga.mil/nameswfs/request.aspx?VERSION=1.1.0&SERVICE=WFS&REQUEST=GetFeature&TYPENAME=gmgml:GND1_NAME_INFORMATION&maxFeatures=10&Filter=<Filter%20xmlns="http://www.opengis.net/ogc"><And><PropertyIsLike%20wildCard="*"%20singleChar="_"%20escapeChar="\\"><PropertyName>NAME_READING_ORDER</PropertyName><Literal>{TERM}*</Literal></PropertyIsLike><PropertyIsLike%20wildCard="*"%20singleChar="_"%20escapeChar="\\"><PropertyName>FEATURE_CLASS</PropertyName><Literal>P</Literal></PropertyIsLike></And></Filter>
# Geoserver pushing URL
wfs.URL = http://localhost:8080/geoserver/wfs
# SMTS query
SMTS.URL = https://egeoint.nrlssc.navy.mil/ogcserver/vector/nonstdmetadata?request=GetFeature&typename=DDMS_DISTINCT_KEYWORD&maxfeatures=1000&outputformat=JSONP&filter=%3Cogc:Filter%20xmlns:ogc=%22http://www.opengis.net/ogc%22%3E%3Cogc:PropertyIsEqualTo%20matchCase=%22false%22%3E%3Cogc:PropertyName%3ECATEGORY%3C/ogc:PropertyName%3E%3Cogc:Literal%3E{EVENT}%3C/ogc:Literal%3E%3C/ogc:PropertyIsEqualTo%3E%3C/ogc:Filter%3E

# SSO stuff is only used for OpenAM
ssoCookie=iPlanetDirectoryPro
authURL=http://sso.nga.mil/opensso/identity/authenticate?uri=realm=/igeointrealm%26module=DataStore
validateURL=http://sso.nga.mil/opensso/identity/isTokenValid?uri=realm=/igeointrealm%26module=DataStore
attributesURL=http://sso.nga.mil/opensso/identity/attributes?uri=realm=/igeointrealm%26module=DataStore
logoutURL=http://sso.nga.mil/opensso/identity/logout
ssoLoginURL=https://sso.nga.mil/opensso/UI/Login?realm=/igeointrealm&goto=http%3A%2F%2Fapp02.ozone.nga.mil%3A80%2Frfi_gen
